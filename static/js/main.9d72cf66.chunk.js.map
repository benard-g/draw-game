{"version":3,"sources":["components/layout/CenterContainer/CenterContainer.styles.tsx","components/layout/CenterContainer/CenterContainer.tsx","styles/themes.tsx","hooks/ApplicationTheme/ApplicationTheme.tsx","components/loaders/LoadingWheel/LoadingWheel.styles.tsx","components/loaders/LoadingWheel/LoadingWheel.tsx","services/graphql/graphqlClient.ts","config/Config.ts","services/i18n/i18n.ts","App/App.styles.tsx","services/graphql/generated.tsx","pages/Home/Home.tsx","App/Routes.tsx","App/App.tsx","reportWebVitals.ts","index.tsx","components/layout/NavBar/NavBar.styles.tsx","components/layout/NavBar/NavBar.tsx","hooks/useI18nLanguages/useI18nLanguages.ts","components/layout/PageLayout/PageLayout.styles.tsx","components/layout/PageLayout/PageLayout.tsx"],"names":["Wrapper","styled","div","CenterContainer","props","children","themes","blue","colors","background","navBar","primary","secondary","fontSize","1","2","3","themeContext","createContext","undefined","ApplicationThemeProvider","defaultTheme","useState","themeName","setThemeName","theme","Provider","value","name","size","color","LoadingWheel","applicationTheme","useContext","Error","useApplicationTheme","graphqlClient","ApolloClient","uri","process","cache","InMemoryCache","initI18n","a","i18n","use","Backend","LanguageDetector","initReactI18next","init","whitelist","fallbackLng","debug","react","wait","returnObjects","returnEmptyString","AppWrapper","HomeDocument","gql","Home","baseOptions","t","useTranslation","Apollo","loading","error","data","pageContent","toto","getToto","description","HomeWithHelmet","PageLayout","Rooms","lazy","RouteWithLoader","path","Loader","fallback","Routes","exact","to","AppReady","htmlAttributes","lang","language","AppNotReady","App","i18nReady","setI18nReady","useEffect","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","header","NavLinksContainer","nav","NavTitle","h1","NavLink","span","NavBar","languages","i18nConfig","options","useMemo","filter","sort","useI18nLanguages","onChange","event","changeLanguage","target","defaultValue","map","toUpperCase"],"mappings":"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","file":"static/js/main.9d72cf66.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React, { FC } from 'react';\n\nimport { Wrapper } from './CenterContainer.styles';\n\nconst CenterContainer: FC = (props) => {\n  const { children } = props;\n\n  return <Wrapper>{children}</Wrapper>;\n};\n\nexport default CenterContainer;\n","import { DefaultTheme } from 'styled-components';\n\n// Override DefaultTheme types to provide nice typings in templates\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    colors: {\n      background: string;\n      navBar: string;\n      primary: string;\n      secondary: string;\n    };\n    fontSize: {\n      1: string;\n      2: string;\n      3: string;\n    };\n  }\n}\n\nconst themeBlue: DefaultTheme = {\n  colors: {\n    background: '#e3f2fd',\n    navBar: '#039be5',\n    primary: '#f44336',\n    secondary: '#f44336',\n  },\n  fontSize: {\n    1: '1em',\n    2: '1.2em',\n    3: '1.5em',\n  },\n};\n\nexport const themes = {\n  blue: themeBlue,\n};\n\nexport type ThemeKey = keyof typeof themes;\n","import React, { createContext, FC, useContext, useState } from 'react';\nimport { DefaultTheme, ThemeProvider } from 'styled-components';\n\nimport { ThemeKey, themes } from '../../styles/themes';\n\ntype ThemeContext = [\n  { name: ThemeKey; theme: DefaultTheme },\n  (k: ThemeKey) => void,\n];\n\nconst themeContext = createContext<ThemeContext | undefined>(undefined);\n\ninterface Props {\n  defaultTheme: ThemeKey;\n}\n\nexport const ApplicationThemeProvider: FC<Props> = (props) => {\n  const { defaultTheme, children } = props;\n\n  const [themeName, setThemeName] = useState<ThemeKey>(defaultTheme);\n  const theme = themes[themeName];\n\n  return (\n    <themeContext.Provider value={[{ name: themeName, theme }, setThemeName]}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </themeContext.Provider>\n  );\n};\n\nexport function useApplicationTheme(): ThemeContext {\n  const applicationTheme = useContext(themeContext);\n  if (!applicationTheme) {\n    throw new Error('Missing wrapping ApplicationThemeProvider');\n  }\n\n  return applicationTheme;\n}\n","import styled from 'styled-components';\n\ninterface WrapperProps {\n  color: string;\n  size: number;\n}\n\nexport const Wrapper = styled.div<WrapperProps>`\n  display: inline-block;\n  position: relative;\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n\n  & > div {\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border: ${({ size }) => size / 12}px solid;\n    border-radius: 50%;\n    animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: ${({ color }) => color} transparent transparent transparent;\n  }\n\n  & > div:nth-child(1) {\n    animation-delay: -0.45s;\n  }\n\n  & > div:nth-child(2) {\n    animation-delay: -0.3s;\n  }\n\n  & > div:nth-child(3) {\n    animation-delay: -0.15s;\n  }\n\n  @keyframes lds-ring {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import React, { FC } from 'react';\n\nimport { useApplicationTheme } from '../../../hooks/ApplicationTheme';\nimport { Wrapper } from './LoadingWheel.styles';\n\ninterface Props {\n  size: number;\n  color?: string;\n}\n\nconst LoadingWheel: FC<Props> = (props) => {\n  const { color, size } = props;\n\n  const [{ theme }] = useApplicationTheme();\n\n  return (\n    <Wrapper color={color || theme.colors.secondary} size={size}>\n      <div></div>\n      <div></div>\n      <div></div>\n    </Wrapper>\n  );\n};\n\nexport default LoadingWheel;\n","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nimport { config } from '../../config/Config';\n\nexport const graphqlClient = new ApolloClient({\n  uri: config.API_URI,\n  cache: new InMemoryCache(),\n});\n","export const config = {\n  API_URI: process.env.REACT_APP_API_URI || 'http://localhost:8080',\n};\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\nexport async function initI18n(): Promise<void> {\n  await i18n\n    .use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n      whitelist: ['en', 'fr'],\n      fallbackLng: 'en',\n      debug: process.env.NODE_ENV === 'development',\n      react: { wait: true },\n      returnObjects: true,\n      returnEmptyString: false,\n    });\n}\n","import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n\n  &,\n  & * {\n    font-size: ${({ theme }) => theme.fontSize[1]};\n  }\n\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getToto: Toto;\n};\n\nexport type Toto = {\n  __typename?: 'Toto';\n  description?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n};\n\nexport type HomeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type HomeQuery = (\n  { __typename?: 'Query' }\n  & { getToto: (\n    { __typename?: 'Toto' }\n    & Pick<Toto, 'name' | 'description'>\n  ) }\n);\n\n\nexport const HomeDocument = gql`\n    query Home {\n  getToto {\n    name\n    description\n  }\n}\n    `;\n\n/**\n * __useHomeQuery__\n *\n * To run a query within a React component, call `useHomeQuery` and pass it any options that fit your needs.\n * When your component renders, `useHomeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHomeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useHomeQuery(baseOptions?: Apollo.QueryHookOptions<HomeQuery, HomeQueryVariables>) {\n        return Apollo.useQuery<HomeQuery, HomeQueryVariables>(HomeDocument, baseOptions);\n      }\nexport function useHomeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomeQuery, HomeQueryVariables>) {\n          return Apollo.useLazyQuery<HomeQuery, HomeQueryVariables>(HomeDocument, baseOptions);\n        }\nexport type HomeQueryHookResult = ReturnType<typeof useHomeQuery>;\nexport type HomeLazyQueryHookResult = ReturnType<typeof useHomeLazyQuery>;\nexport type HomeQueryResult = Apollo.QueryResult<HomeQuery, HomeQueryVariables>;","import { gql } from '@apollo/client';\nimport React, { FC, ReactElement } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\n\nimport PageLayout from '../../components/layout/PageLayout';\nimport { useHomeQuery } from '../../services/graphql/generated';\n\ngql`\n  query Home {\n    getToto {\n      name\n      description\n    }\n  }\n`;\n\nconst Home: FC = () => {\n  const { t } = useTranslation();\n  const { loading, error, data } = useHomeQuery();\n\n  let pageContent: ReactElement | null = null;\n  if (loading) {\n    pageContent = <p>Loading...</p>;\n  } else if (error) {\n    pageContent = <p>An error occurred...</p>;\n  } else if (data) {\n    const toto = data.getToto;\n    pageContent = (\n      <>\n        <br />\n        <br />\n        <br />\n        <h2>{toto.name}</h2>\n        <p>{toto.description}</p>\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <h1>{t('pages.Home.title')}</h1>\n      {pageContent}\n    </div>\n  );\n};\n\nconst HomeWithHelmet: FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('pages.Home.head.title')}</title>\n      </Helmet>\n\n      <PageLayout>\n        <Home />\n      </PageLayout>\n    </>\n  );\n};\n\nexport default HomeWithHelmet;\n","import React, { FC, lazy, Suspense } from 'react';\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nimport CenterContainer from '../components/layout/CenterContainer';\nimport LoadingWheel from '../components/loaders/LoadingWheel';\nimport Home from '../pages/Home';\n\nconst Rooms = lazy(() => import('../pages/Rooms'));\n\ninterface RouteWithLoaderProps {\n  path: string;\n}\n\nconst RouteWithLoader: FC<RouteWithLoaderProps> = (props) => {\n  const { path, children } = props;\n\n  const Loader = (\n    <CenterContainer>\n      <LoadingWheel size={48} />\n    </CenterContainer>\n  );\n\n  return (\n    <Route path={path}>\n      <Suspense fallback={Loader}>{children}</Suspense>\n    </Route>\n  );\n};\n\nconst Routes: FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        <RouteWithLoader path=\"/rooms\">\n          <Rooms />\n        </RouteWithLoader>\n\n        <Route path=\"*\">\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import { ApolloProvider } from '@apollo/client';\nimport React, { FC, useEffect, useState } from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\n\nimport CenterContainer from '../components/layout/CenterContainer';\nimport LoadingWheel from '../components/loaders/LoadingWheel';\nimport { ApplicationThemeProvider } from '../hooks/ApplicationTheme';\nimport { graphqlClient } from '../services/graphql/graphqlClient';\nimport { initI18n } from '../services/i18n/i18n';\nimport { AppWrapper } from './App.styles';\nimport Routes from './Routes';\n\nconst AppReady: FC = () => {\n  const { i18n, t } = useTranslation();\n\n  return (\n    <>\n      <Helmet htmlAttributes={{ lang: i18n.language }}>\n        <title>{t('App.head.title')}</title>\n      </Helmet>\n\n      <Routes />\n    </>\n  );\n};\n\nconst AppNotReady: FC = () => {\n  return (\n    <CenterContainer>\n      <LoadingWheel size={48} />\n    </CenterContainer>\n  );\n};\n\nconst App: FC = () => {\n  const [i18nReady, setI18nReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      await initI18n();\n      setI18nReady(true);\n    })();\n  }, []);\n\n  return (\n    <HelmetProvider>\n      <ApplicationThemeProvider defaultTheme=\"blue\">\n        <ApolloProvider client={graphqlClient}>\n          <AppWrapper>{i18nReady ? <AppReady /> : <AppNotReady />}</AppWrapper>\n        </ApolloProvider>\n      </ApplicationThemeProvider>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","/* istanbul ignore file */\n\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'reset-css';\nimport './styles/global.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.header`\n  padding: 16px;\n  margin-bottom: 15px;\n\n  background-color: ${({ theme }) => theme.colors.navBar};\n\n  display: flex;\n  flex-direction: row;\n\n  & > *:not(:first-child) {\n    margin-left: 10px;\n  }\n`;\n\nexport const NavLinksContainer = styled.nav`\n  & > ul {\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n  }\n\n  & > ul > li:not(:first-child) {\n    margin-left: 10px;\n  }\n`;\n\nexport const NavTitle = styled.h1`\n  font-size: ${({ theme }) => theme.fontSize[3]};\n  font-weight: bold;\n`;\n\nexport const NavLink = styled.span`\n  font-size: ${({ theme }) => theme.fontSize[1]};\n`;\n","import React, { ChangeEvent, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport { useI18nLanguages } from '../../../hooks/useI18nLanguages';\nimport { NavLink, NavLinksContainer, NavTitle, Wrapper } from './NavBar.styles';\n\nconst NavBar: FC = () => {\n  const { t, i18n } = useTranslation();\n  const languages = useI18nLanguages(i18n);\n\n  const onLangChanged = (event: ChangeEvent<HTMLSelectElement>) => {\n    i18n.changeLanguage(event.target.value);\n  };\n\n  return (\n    <Wrapper>\n      <NavLinksContainer>\n        <ul>\n          <li>\n            <Link to=\"/\">\n              <NavTitle>{t('components.NavBar.title')}</NavTitle>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/rooms\">\n              <NavLink>{t('components.NavBar.linkRooms')}</NavLink>\n            </Link>\n          </li>\n        </ul>\n      </NavLinksContainer>\n\n      <select onChange={onLangChanged} defaultValue={i18n.language}>\n        {languages.map((lang) => (\n          <option value={lang} key={lang}>\n            {lang.toUpperCase()}\n          </option>\n        ))}\n      </select>\n    </Wrapper>\n  );\n};\n\nexport default NavBar;\n","import { i18n } from 'i18next';\nimport { useMemo } from 'react';\n\nexport function useI18nLanguages(i18nConfig: i18n): string[] {\n  const whitelist = i18nConfig.options.whitelist as string[];\n\n  return useMemo(() => whitelist.filter((lang) => lang !== 'cimode').sort(), [\n    whitelist,\n  ]);\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  flex-direction: column;\n`;\n","import React, { FC } from 'react';\n\nimport NavBar from '../NavBar';\nimport { Wrapper } from './PageLayout.styles';\n\nconst PageLayout: FC = (props) => {\n  const { children } = props;\n\n  return (\n    <Wrapper>\n      <NavBar />\n      <Wrapper>{children}</Wrapper>\n    </Wrapper>\n  );\n};\n\nexport default PageLayout;\n"],"sourceRoot":""}