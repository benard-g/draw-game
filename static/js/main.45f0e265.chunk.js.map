{"version":3,"sources":["components/layout/NavBar/NavBar.styles.tsx","components/layout/NavBar/NavBar.tsx","hooks/useI18nLanguages/useI18nLanguages.ts","components/layout/PageLayout/PageLayout.styles.tsx","components/layout/PageLayout/PageLayout.tsx","components/layout/CenterContainer/CenterContainer.styles.tsx","components/layout/CenterContainer/CenterContainer.tsx","styles/themes.tsx","hooks/ApplicationTheme/ApplicationTheme.tsx","components/loaders/LoadingWheel/LoadingWheel.styles.tsx","components/loaders/LoadingWheel/LoadingWheel.tsx","App/App.styles.tsx","App/i18next.ts","pages/Home/Home.tsx","App/Routes.tsx","App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","header","theme","colors","navBar","NavLinksContainer","nav","NavTitle","h1","fontSize","NavLink","span","NavBar","useTranslation","t","i18n","languages","i18nConfig","whitelist","options","useMemo","filter","lang","sort","useI18nLanguages","to","onChange","event","changeLanguage","target","value","defaultValue","language","map","toUpperCase","div","PageLayout","props","children","CenterContainer","themes","blue","background","primary","secondary","1","2","3","themeContext","createContext","undefined","ApplicationThemeProvider","defaultTheme","useState","themeName","setThemeName","Provider","name","size","color","LoadingWheel","applicationTheme","useContext","Error","useApplicationTheme","AppWrapper","initI18n","a","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","process","react","wait","returnObjects","returnEmptyString","Home","Rooms","lazy","RouteWithLoader","path","Loader","fallback","Routes","exact","AppReady","htmlAttributes","AppNotReady","App","i18nReady","setI18nReady","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45f0e265.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.header`\n  padding: 16px;\n  margin-bottom: 15px;\n\n  background-color: ${({ theme }) => theme.colors.navBar};\n\n  display: flex;\n  flex-direction: row;\n\n  & > *:not(:first-child) {\n    margin-left: 10px;\n  }\n`;\n\nexport const NavLinksContainer = styled.nav`\n  & > ul {\n    display: flex;\n    flex-direction: row;\n    align-items: baseline;\n  }\n\n  & > ul > li:not(:first-child) {\n    margin-left: 10px;\n  }\n`;\n\nexport const NavTitle = styled.h1`\n  font-size: ${({ theme }) => theme.fontSize[3]};\n  font-weight: bold;\n`;\n\nexport const NavLink = styled.span`\n  font-size: ${({ theme }) => theme.fontSize[1]};\n`;\n","import React, { ChangeEvent, FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\nimport { useI18nLanguages } from '../../../hooks/useI18nLanguages';\nimport { NavLink, NavLinksContainer, NavTitle, Wrapper } from './NavBar.styles';\n\nconst NavBar: FC = () => {\n  const { t, i18n } = useTranslation();\n  const languages = useI18nLanguages(i18n);\n\n  const onLangChanged = (event: ChangeEvent<HTMLSelectElement>) => {\n    i18n.changeLanguage(event.target.value);\n  };\n\n  return (\n    <Wrapper>\n      <NavLinksContainer>\n        <ul>\n          <li>\n            <Link to=\"/\">\n              <NavTitle>{t('components.NavBar.title')}</NavTitle>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"/rooms\">\n              <NavLink>{t('components.NavBar.linkRooms')}</NavLink>\n            </Link>\n          </li>\n        </ul>\n      </NavLinksContainer>\n\n      <select onChange={onLangChanged} defaultValue={i18n.language}>\n        {languages.map((lang) => (\n          <option value={lang} key={lang}>\n            {lang.toUpperCase()}\n          </option>\n        ))}\n      </select>\n    </Wrapper>\n  );\n};\n\nexport default NavBar;\n","import { i18n } from 'i18next';\nimport { useMemo } from 'react';\n\nexport function useI18nLanguages(i18nConfig: i18n): string[] {\n  const whitelist = i18nConfig.options.whitelist as string[];\n\n  return useMemo(() => whitelist.filter((lang) => lang !== 'cimode').sort(), [\n    whitelist,\n  ]);\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  flex-direction: column;\n`;\n","import React, { FC } from 'react';\n\nimport NavBar from '../NavBar';\nimport { Wrapper } from './PageLayout.styles';\n\nconst PageLayout: FC = (props) => {\n  const { children } = props;\n\n  return (\n    <Wrapper>\n      <NavBar />\n      <Wrapper>{children}</Wrapper>\n    </Wrapper>\n  );\n};\n\nexport default PageLayout;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  flex-grow: 1;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React, { FC } from 'react';\n\nimport { Wrapper } from './CenterContainer.styles';\n\nconst CenterContainer: FC = (props) => {\n  const { children } = props;\n\n  return <Wrapper>{children}</Wrapper>;\n};\n\nexport default CenterContainer;\n","import { DefaultTheme } from 'styled-components';\n\n// Override DefaultTheme types to provide nice typings in templates\ndeclare module 'styled-components' {\n  export interface DefaultTheme {\n    colors: {\n      background: string;\n      navBar: string;\n      primary: string;\n      secondary: string;\n    };\n    fontSize: {\n      1: string;\n      2: string;\n      3: string;\n    };\n  }\n}\n\nconst themeBlue: DefaultTheme = {\n  colors: {\n    background: '#e3f2fd',\n    navBar: '#039be5',\n    primary: '#f44336',\n    secondary: '#f44336',\n  },\n  fontSize: {\n    1: '1em',\n    2: '1.2em',\n    3: '1.5em',\n  },\n};\n\nexport const themes = {\n  blue: themeBlue,\n};\n\nexport type ThemeKey = keyof typeof themes;\n","import React, { createContext, FC, useContext, useState } from 'react';\nimport { DefaultTheme, ThemeProvider } from 'styled-components';\n\nimport { ThemeKey, themes } from '../../styles/themes';\n\ntype ThemeContext = [\n  { name: ThemeKey; theme: DefaultTheme },\n  (k: ThemeKey) => void,\n];\n\nconst themeContext = createContext<ThemeContext | undefined>(undefined);\n\ninterface Props {\n  defaultTheme: ThemeKey;\n}\n\nexport const ApplicationThemeProvider: FC<Props> = (props) => {\n  const { defaultTheme, children } = props;\n\n  const [themeName, setThemeName] = useState<ThemeKey>(defaultTheme);\n  const theme = themes[themeName];\n\n  return (\n    <themeContext.Provider value={[{ name: themeName, theme }, setThemeName]}>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </themeContext.Provider>\n  );\n};\n\nexport function useApplicationTheme(): ThemeContext {\n  const applicationTheme = useContext(themeContext);\n  if (!applicationTheme) {\n    throw new Error('Missing wrapping ApplicationThemeProvider');\n  }\n\n  return applicationTheme;\n}\n","import styled from 'styled-components';\n\ninterface WrapperProps {\n  color: string;\n  size: number;\n}\n\nexport const Wrapper = styled.div<WrapperProps>`\n  display: inline-block;\n  position: relative;\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n\n  & > div {\n    box-sizing: border-box;\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    border: ${({ size }) => size / 12}px solid;\n    border-radius: 50%;\n    animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n    border-color: ${({ color }) => color} transparent transparent transparent;\n  }\n\n  & > div:nth-child(1) {\n    animation-delay: -0.45s;\n  }\n\n  & > div:nth-child(2) {\n    animation-delay: -0.3s;\n  }\n\n  & > div:nth-child(3) {\n    animation-delay: -0.15s;\n  }\n\n  @keyframes lds-ring {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import React, { FC } from 'react';\n\nimport { useApplicationTheme } from '../../../hooks/ApplicationTheme';\nimport { Wrapper } from './LoadingWheel.styles';\n\ninterface Props {\n  size: number;\n  color?: string;\n}\n\nconst LoadingWheel: FC<Props> = (props) => {\n  const { color, size } = props;\n\n  const [{ theme }] = useApplicationTheme();\n\n  return (\n    <Wrapper color={color || theme.colors.secondary} size={size}>\n      <div></div>\n      <div></div>\n      <div></div>\n    </Wrapper>\n  );\n};\n\nexport default LoadingWheel;\n","import styled from 'styled-components';\n\nexport const AppWrapper = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n\n  &,\n  & * {\n    font-size: ${({ theme }) => theme.fontSize[1]};\n  }\n\n  background-color: ${({ theme }) => theme.colors.background};\n`;\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { initReactI18next } from 'react-i18next';\n\nexport async function initI18n(): Promise<void> {\n  await i18n\n    .use(Backend)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n      whitelist: ['en', 'fr'],\n      fallbackLng: 'en',\n      debug: process.env.NODE_ENV === 'development',\n      react: { wait: true },\n      returnObjects: true,\n      returnEmptyString: false,\n    });\n}\n","import React, { FC } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\n\nimport PageLayout from '../../components/layout/PageLayout';\n\nconst Home: FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <Helmet>\n        <title>{t('pages.Home.head.title')}</title>\n      </Helmet>\n      <PageLayout>\n        <h1>{t('pages.Home.title')}</h1>\n      </PageLayout>\n    </>\n  );\n};\n\nexport default Home;\n","import React, { FC, lazy, Suspense } from 'react';\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nimport CenterContainer from '../components/layout/CenterContainer';\nimport LoadingWheel from '../components/loaders/LoadingWheel';\nimport Home from '../pages/Home';\n\nconst Rooms = lazy(() => import('../pages/Rooms'));\n\ninterface RouteWithLoaderProps {\n  path: string;\n}\n\nconst RouteWithLoader: FC<RouteWithLoaderProps> = (props) => {\n  const { path, children } = props;\n\n  const Loader = (\n    <CenterContainer>\n      <LoadingWheel size={48} />\n    </CenterContainer>\n  );\n\n  return (\n    <Route path={path}>\n      <Suspense fallback={Loader}>{children}</Suspense>\n    </Route>\n  );\n};\n\nconst Routes: FC = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n\n        <RouteWithLoader path=\"/rooms\">\n          <Rooms />\n        </RouteWithLoader>\n\n        <Route path=\"*\">\n          <Redirect to=\"/\" />\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React, { FC, useEffect, useState } from 'react';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { useTranslation } from 'react-i18next';\n\nimport CenterContainer from '../components/layout/CenterContainer';\nimport LoadingWheel from '../components/loaders/LoadingWheel';\nimport { ApplicationThemeProvider } from '../hooks/ApplicationTheme';\nimport { AppWrapper } from './App.styles';\nimport { initI18n } from './i18next';\nimport Routes from './Routes';\n\nconst AppReady: FC = () => {\n  const { i18n, t } = useTranslation();\n\n  return (\n    <>\n      <Helmet htmlAttributes={{ lang: i18n.language }}>\n        <title>{t('App.head.title')}</title>\n      </Helmet>\n\n      <Routes />\n    </>\n  );\n};\n\nconst AppNotReady: FC = () => {\n  return (\n    <CenterContainer>\n      <LoadingWheel size={48} />\n    </CenterContainer>\n  );\n};\n\nconst App: FC = () => {\n  const [i18nReady, setI18nReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    (async () => {\n      await initI18n();\n      setI18nReady(true);\n    })();\n  }, []);\n\n  return (\n    <HelmetProvider>\n      <ApplicationThemeProvider defaultTheme=\"blue\">\n        <AppWrapper>{i18nReady ? <AppReady /> : <AppNotReady />}</AppWrapper>\n      </ApplicationThemeProvider>\n    </HelmetProvider>\n  );\n};\n\nexport default App;\n","/* istanbul ignore file */\n\nimport { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'reset-css';\nimport './styles/global.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}